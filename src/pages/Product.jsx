import { Button, Typography, Tabs } from "antd";
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "../App.css";
import { DeleteFilled, MinusOutlined, PlusOutlined } from "@ant-design/icons";

const { Text } = Typography;
const { TabPane } = Tabs;

// Example dishes with categories
const categories = [
  { id: "1", name: "–ë–ª—é–¥–∞" },
  { id: "6", name: "–§–∞—Å—Ç—Ñ—É–¥" },
  { id: "2", name: "–ù–∞–ø–∏—Ç–∫–∏" },
  { id: "3", name: "–°–æ–∫–∏" },
  { id: "4", name: "–•–ª–µ–±" },
  { id: "5", name: "–ö–æ—Ñ–µ" },
];

const dishes = [
  { id: 1, name: "–ü–∏—Ü—Ü–∞", price: 500, emoji: "üçï", category: "6" },
  { id: 2, name: "–°—É—à–∏", price: 300, emoji: "üç£", category: "1" },
  { id: 3, name: "–ë—É—Ä–≥–µ—Ä", price: 350, emoji: "üçî", category: "6" },
  { id: 4, name: "–°–∞–ª–∞—Ç", price: 150, emoji: "ü•ó", category: "1" },
  { id: 5, name: "–°—Ç–µ–π–∫", price: 700, emoji: "ü•©", category: "1" },
  { id: 6, name: "–î–µ—Å–µ—Ä—Ç", price: 200, emoji: "üç∞", category: "1" },
  { id: 7, name: "–ö–æ–ª–∞", price: 100, emoji: "ü•§", category: "2" },
  { id: 8, name: "–ú–∏–Ω–µ—Ä–∞–ª–∫–∞", price: 50, emoji: "üíß", category: "2" },
  { id: 9, name: "–õ–∏–º–æ–Ω–∞–¥", price: 150, emoji: "üçã", category: "2" },
  { id: 10, name: "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫", price: 120, emoji: "üçä", category: "3" },
  { id: 11, name: "–Ø–±–ª–æ—á–Ω—ã–π —Å–æ–∫", price: 100, emoji: "üçè", category: "3" },
  { id: 12, name: "–í–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã–π —Å–æ–∫", price: 130, emoji: "üçá", category: "3" },
  { id: 13, name: "–ß–∏–∞–±–∞—Ç—Ç–∞", price: 90, emoji: "üçû", category: "4" },
  { id: 14, name: "–ë–∞–≥–µ—Ç", price: 120, emoji: "ü•ñ", category: "4" },
  { id: 15, name: "–ö–æ—Ñ–µ –ª–∞—Ç—Ç–µ", price: 180, emoji: "‚òï", category: "5" },
  { id: 16, name: "–≠—Å–ø—Ä–µ—Å—Å–æ", price: 150, emoji: "‚òï", category: "5" },
  { id: 17, name: "–ö–∞–ø—É—á–∏–Ω–æ", price: 160, emoji: "‚òï", category: "5" },
  { id: 18, name: "–ê–º–µ—Ä–∏–∫–∞–Ω–æ", price: 140, emoji: "‚òï", category: "5" },
  { id: 19, name: "–ü–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞", price: 550, emoji: "üçù", category: "1" },
  { id: 20, name: "–ü–∞—Å—Ç–∞ –ë–æ–ª–æ–Ω—å–µ–∑–µ", price: 480, emoji: "üçù", category: "1" },
  { id: 21, name: "–†–∞–º–µ–Ω", price: 400, emoji: "üçú", category: "1" },
  { id: 22, name: "–ß–∏–∑–±—É—Ä–≥–µ—Ä", price: 350, emoji: "üçî", category: "6" },
  { id: 23, name: "–¢–æ–º –Ø–º", price: 350, emoji: "üç≤", category: "1" },
  {
    id: 24,
    name: "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞",
    price: 200,
    emoji: "üßÄ",
    category: "1",
  },
  { id: 25, name: "–õ–∞—Ç—Ç–µ –º–∞–∫–∏–∞—Ç–æ", price: 190, emoji: "‚òï", category: "5" },
  { id: 26, name: "–¢—Ä—é—Ñ–µ–ª—å–Ω—ã–π –±—É—Ä–≥–µ—Ä", price: 700, emoji: "üçî", category: "6" },
  { id: 27, name: "–¢–∏—Ä–∞–º–∏—Å—É", price: 250, emoji: "üçÆ", category: "1" },
  { id: 29, name: "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç", price: 250, emoji: "ü•ó", category: "1" },
  { id: 30, name: "–§–æ–∫–∞—á—á–∞", price: 180, emoji: "üçû", category: "4" },
  { id: 31, name: "–¶–µ–∑–∞—Ä—å", price: 300, emoji: "ü•ó", category: "1" },
  {
    id: 32,
    name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —á–∏–∑–∫–µ–π–∫",
    price: 200,
    emoji: "üç∞",
    category: "1",
  },
  {
    id: 33,
    name: "–°—É–ø-–ø—é—Ä–µ –∏–∑ –±—Ä–æ–∫–∫–æ–ª–∏",
    price: 180,
    emoji: "ü•£",
    category: "1",
  },
  { id: 34, name: "–°–≤–µ–∂–∏–π —Å–æ–∫", price: 120, emoji: "üçä", category: "3" },
  {
    id: 35,
    name: "–ö–∞–ø—É—á–∏–Ω–æ —Å –∫–∞—Ä–∞–º–µ–ª—å—é",
    price: 170,
    emoji: "‚òï",
    category: "5",
  },
  {
    id: 36,
    name: "–ì—Ä–∞–Ω–æ–ª–∞ —Å –π–æ–≥—É—Ä—Ç–æ–º",
    price: 160,
    emoji: "üçß",
    category: "1",
  },
  { id: 37, name: "–ú–æ—Ö–∏—Ç–æ", price: 200, emoji: "üçπ", category: "2" },
  { id: 38, name: "–í–∏—Å–∫–∏ —Å –∫–æ–ª–æ–π", price: 250, emoji: "ü•É", category: "2" },
  { id: 39, name: "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º", price: 130, emoji: "‚òïü•õ", category: "5" },
  { id: 40, name: "–ß–∞–π —Å –ª–∏–º–æ–Ω–æ–º", price: 100, emoji: "üçµüçã", category: "5" },
];

const Product = () => {
  const [cart, setCart] = useState(() => {
    const savedCart = localStorage.getItem("cart");
    return savedCart ? JSON.parse(savedCart) : [];
  });

  const [selectedCategory, setSelectedCategory] = useState("1");

  const navigate = useNavigate();

  const handleAddToCart = (dishId) => {
    const newCart = [...cart];
    const dishIndex = newCart.findIndex((item) => item.id === dishId);

    if (dishIndex > -1) {
      newCart[dishIndex].quantity += 1;
    } else {
      newCart.push({
        id: dishId,
        quantity: 1,
        name: dishes.find((dish) => dish.id === dishId).name,
        price: dishes.find((dish) => dish.id === dishId).price,
      });
    }

    setCart(newCart);
    localStorage.setItem("cart", JSON.stringify(newCart));
  };

  const handleDecreaseQuantity = (dishId) => {
    const newCart = [...cart];
    const dishIndex = newCart.findIndex((item) => item.id === dishId);

    if (dishIndex > -1 && newCart[dishIndex].quantity > 1) {
      newCart[dishIndex].quantity -= 1;
    } else {
      newCart.splice(dishIndex, 1);
    }

    setCart(newCart);
    localStorage.setItem("cart", JSON.stringify(newCart));
  };

  const handleReserveTable = () => {
    navigate("/booking");
  };

  const calculateTotal = () => {
    return cart.reduce((total, item) => total + item.price * item.quantity, 0);
  };

  const handleRemoveFromCart = (dishId) => {
    const newCart = cart.filter((item) => item.id !== dishId);
    setCart(newCart);
    localStorage.setItem("cart", JSON.stringify(newCart));
  };

  const filteredDishes = dishes.filter(
    (dish) => dish.category === selectedCategory
  );

  return (
    <div style={{ padding: 10 }}>
      <Tabs defaultActiveKey="1" onChange={setSelectedCategory}>
        {categories.map((category) => (
          <TabPane tab={category.name} key={category.id} />
        ))}
      </Tabs>

      <div
        style={{
          display: "flex",
          flexWrap: "wrap",
          gap: "10px",
          justifyContent: "center",
        }}
      >
        {filteredDishes.map((dish) => {
          const currentDish = cart.find((item) => item.id === dish.id);
          const quantity = currentDish ? currentDish.quantity : 0;

          return (
            <div
              key={dish.id}
              style={{
                width: "117px",
                boxSizing: "border-box",
                padding: "5px",
                border: "1px solid #ccc",
                borderRadius: "8px",
                textAlign: "center",
                position: "relative",
                backgroundColor: "#f9f9f9",
              }}
            >
              <div onClick={() => handleAddToCart(dish.id)}>
                <div style={{ fontSize: "40px", marginBottom: "10px" }}>
                  {dish.emoji}
                </div>
                <span>
                  <b style={{ fontSize: "14px", fontWeight: "bold" }}>
                    {dish.name}
                  </b>
                </span>
                <div style={{ margin: "10px 0 10px" }}>
                  <b style={{ fontSize: "14px", fontWeight: "bold" }}>–¶–µ–Ω–∞:</b>{" "}
                  {dish.price} ‚ÇΩ
                </div>
              </div>
              <div className="btn-product">
                <button
                  onClick={() => handleDecreaseQuantity(dish.id)}
                  style={{
                    padding: "8px 15px",
                    backgroundColor: "#f44336",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                  }}
                >
                  <MinusOutlined />
                </button>
                <button
                  onClick={() => handleAddToCart(dish.id)}
                  style={{
                    padding: "10px 15px",
                    backgroundColor: "#4CAF50",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                  }}
                >
                  <PlusOutlined />
                </button>
              </div>
              {quantity > 0 && (
                <span
                  style={{
                    position: "absolute",
                    top: "3px",
                    right: "3px",
                    border: "0.3px solid black",
                    color: "green",
                    width: "20px",
                    textAlign: "center",
                    padding: "2px",
                    borderRadius: "50%",
                  }}
                >
                  <b>{quantity}</b>
                </span>
              )}
            </div>
          );
        })}
      </div>

      <div style={{ textAlign: "left", margin: "40px 0 10px 0" }}>
        {cart.length > 0 ? (
          cart.map((item) => (
            <div
              key={item.id}
              style={{ marginBottom: "5px", position: "relative" }}
            >
              <Text
                strong
                style={{
                  fontSize: "16px",
                  margin: 0,
                }}
              >
                {item.name} x{item.quantity} = {item.price * item.quantity} ‚ÇΩ
                <DeleteFilled
                  onClick={() => handleRemoveFromCart(item.id)}
                  style={{
                    position: "absolute",
                    right: "0",
                    top: "50%",
                    transform: "translateY(-50%)",
                    color: "#f44336",
                    cursor: "pointer",
                    fontSize: "20px",
                  }}
                />
              </Text>
            </div>
          ))
        ) : (
          <Text>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</Text>
        )}

        <div style={{ marginTop: "10px" }}>
          <Text strong>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calculateTotal()} ‚ÇΩ</Text>
        </div>

        <Button
          size="large"
          onClick={handleReserveTable}
          style={{
            position: "fixed", // –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            bottom: "10px", // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
            right: "20px", // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            padding: "12px 24px",
            backgroundColor: "#007bff",
            color: "white",
            border: "none",
            borderRadius: "4px",
            width: "auto", // –®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è
            cursor: "pointer",
          }}
        >
          –ë—Ä–æ–Ω—å —Å—Ç–æ–ª–∏–∫–∞
        </Button>
      </div>
    </div>
  );
};

export default Product;
