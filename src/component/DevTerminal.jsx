import React, { useEffect, useState } from 'react';
import { Modal, Input } from 'antd';

const frames = [
  `
  |\\---/|
  | o_o |
   \\_^_/  [–≤–∑–ª–∞–º—ã–≤–∞—é...]
  `,
  `
  |\\---/|
  | -_- |
   /   \\  [–≤–∑–ª–æ–º –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤]
  `,
  `
  |\\---/|
  | >_< |
  /_____| [—É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω root-–¥–æ—Å—Ç—É–ø]
  `
];

const commandsHelp = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- whoami ‚Äî –∫—Ç–æ —Ç—ã
- fortune ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
- clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª
- help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
`;

const HackerCatTerminal = () => {
  const [visible, setVisible] = useState(false);
  const [command, setCommand] = useState('');
  const [output, setOutput] = useState('üê± –ó–∞–ø—É—Å–∫ —Ö–∞–∫–µ—Ä-–∫–æ—Ç–∞...\n');
  const [frameIndex, setFrameIndex] = useState(0);

  const openTerminal = () => {
    setVisible(true);
    setCommand('');
    setOutput('üê± –ó–∞–ø—É—Å–∫ —Ö–∞–∫–µ—Ä-–∫–æ—Ç–∞...\n');
    setFrameIndex(0);
  };

  useEffect(() => {
    const keyboardHandler = (e) => {
      if (e.ctrlKey && e.shiftKey && e.key === 'K') {
        openTerminal();
      }
    };
  
    const customEventHandler = () => {
      openTerminal(); // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è hackerCatOpen (–º–æ–±–∏–ª—å–Ω–∞—è –ø–∞—Å—Ö–∞–ª–∫–∞)
    };
  
    window.addEventListener('keydown', keyboardHandler);
    window.addEventListener('hackerCatOpen', customEventHandler);
    window.activateHackerCat = openTerminal;
  
    return () => {
      window.removeEventListener('keydown', keyboardHandler);
      window.removeEventListener('hackerCatOpen', customEventHandler);
    };
  }, []);
  

  useEffect(() => {
    if (!visible) return;
    const interval = setInterval(() => {
      setFrameIndex((prev) => (prev + 1) % frames.length);
    }, 1500);
    return () => clearInterval(interval);
  }, [visible]);

  const handleCommand = (value) => {
    setCommand('');
    switch (value.toLowerCase()) {
      case 'whoami':
        setOutput((prev) => prev + '\nüë§ –Ø ‚Äî –•–∞–∫–µ—Ä –ö–æ—Ç. –ó–∞—â–∏—Ç–Ω–∏–∫ –∫–æ–¥–∞ –∏ –±–∞–≥–æ–≤.\n');
        break;
      case 'fortune':
        setOutput((prev) => prev + '\nüîÆ –°–µ–≥–æ–¥–Ω—è –≤—Å—ë –∑–∞–¥–µ–ø–ª–æ–∏—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ.\n');
        break;
      case 'clear':
        setOutput('');
        break;
      case 'help':
        setOutput((prev) => prev + `\n${commandsHelp}`);
        break;
      default:
        setOutput((prev) => prev + `\nü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${value}`);
    }
  };

  return (
    <Modal
      open={visible}
      title="üê± –•–∞–∫–µ—Ä –ö–æ—Ç"
      onCancel={() => setVisible(false)}
      footer={null}
      width={600}
    >
      <pre style={{
        background: 'black',
        color: 'lime',
        minHeight: 180,
        fontFamily: 'monospace',
        padding: 12,
        borderRadius: 10,
        marginBottom: 10
      }}>
        {frames[frameIndex] + '\n' + output}
      </pre>
      <Input
        value={command}
        onChange={(e) => setCommand(e.target.value)}
        onPressEnter={() => handleCommand(command)}
        placeholder="–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É (help ‚Äî —Å–ø–∏—Å–æ–∫)"
      />
    </Modal>
  );
};

export default HackerCatTerminal;
